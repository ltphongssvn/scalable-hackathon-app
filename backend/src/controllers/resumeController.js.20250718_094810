// Resume Controller with AI Parsing Integration
// Handles all resume-related operations including upload, retrieval, deletion, and AI parsing

const path = require('path');
const fs = require('fs').promises;
const { query } = require('../config/database');
const huggingFaceService = require('../services/ai/huggingfaceService');

/**
 * Upload and parse a resume
 * This function handles the complete resume processing pipeline:
 * 1. File upload (handled by multer middleware)
 * 2. Database storage of file metadata
 * 3. AI parsing of resume content
 * 4. Storage of parsed data
 */
async function uploadResume(req, res) {
    try {
        // Check if a file was uploaded
        if (!req.file) {
            return res.status(400).json({
                success: false,
                message: 'No file uploaded'
            });
        }

        // Extract file information from multer
        const {
            filename,      // Unique filename on server
            path: filePath,  // Full path to uploaded file
            size,          // File size in bytes
            mimetype       // MIME type of the file
        } = req.file;

        // Get the original filename
        const originalName = req.uploadedFileOriginalName || req.file.originalname;

        console.log(`Processing resume upload: ${originalName}`);

        // First, store the file metadata in database
        const insertQuery = `
            INSERT INTO resumes (
                user_id,
                filename,
                original_name,
                file_path,
                file_size,
                mime_type,
                uploaded_at
            ) VALUES ($1, $2, $3, $4, $5, $6, NOW())
            RETURNING id, filename, original_name, file_size, uploaded_at
        `;

        const values = [
            req.user.id,                    // From auth middleware
            filename,                        // Unique filename on server
            originalName,                    // Original filename from user
            `uploads/resumes/${filename}`,   // Relative path to file
            size,                           // File size
            mimetype                        // File type
        ];

        const result = await query(insertQuery, values);
        const resume = result.rows[0];

        console.log(`Resume saved to database with ID: ${resume.id}`);

        // Now, trigger AI parsing asynchronously
        // We don't want to block the upload response while parsing
        parseResumeAsync(resume.id, filePath, req.user.id);

        // Send immediate success response
        // The parsing will happen in the background
        res.status(201).json({
            success: true,
            message: 'Resume uploaded successfully. AI parsing in progress...',
            data: {
                id: resume.id,
                filename: resume.original_name,
                size: resume.file_size,
                uploadedAt: resume.uploaded_at,
                parsingStatus: 'in_progress'
            }
        });

    } catch (error) {
        console.error('Resume upload error:', error);

        // Clean up file if database operation failed
        if (req.file) {
            try {
                await fs.unlink(req.file.path);
                console.log('Cleaned up uploaded file after error');
            } catch (unlinkError) {
                console.error('Error deleting file:', unlinkError);
            }
        }

        res.status(500).json({
            success: false,
            message: 'Failed to upload resume'
        });
    }
}

/**
 * Asynchronously parse a resume using AI
 * This function runs in the background after the upload response is sent
 * @param {number} resumeId - Database ID of the resume
 * @param {string} filePath - Path to the uploaded file
 * @param {number} userId - ID of the user who uploaded the resume
 */
async function parseResumeAsync(resumeId, filePath, userId) {
    try {
        console.log(`Starting AI parsing for resume ID: ${resumeId}`);

        // Call the Hugging Face service to parse the resume
        const parseResult = await huggingFaceService.parseResume(filePath);

        if (parseResult.success) {
            // Update the database with parsed data
            const updateQuery = `
                UPDATE resumes 
                SET 
                    parsed_data = $1,
                    parsed_at = NOW()
                WHERE id = $2 AND user_id = $3
            `;

            await query(updateQuery, [
                JSON.stringify(parseResult.data),  // Store as JSON
                resumeId,
                userId
            ]);

            console.log(`âœ“ Resume ID ${resumeId} parsed successfully`);

            // Log extracted information for debugging
            console.log('Extracted data:', {
                name: parseResult.data.name,
                email: parseResult.data.email,
                skills: parseResult.data.skills?.length || 0,
                hasEducation: !!parseResult.data.education,
                hasExperience: !!parseResult.data.experience
            });

        } else {
            console.error(`Failed to parse resume ID ${resumeId}:`, parseResult.error);

            // Even if parsing fails, we might want to mark it as attempted
            // This prevents the system from trying to parse it repeatedly
            const updateQuery = `
                UPDATE resumes 
                SET 
                    parsed_data = $1,
                    parsed_at = NOW()
                WHERE id = $2 AND user_id = $3
            `;

            await query(updateQuery, [
                JSON.stringify({ error: parseResult.error, attempted: true }),
                resumeId,
                userId
            ]);
        }

    } catch (error) {
        console.error(`Error in async resume parsing for ID ${resumeId}:`, error);
    }
}

/**
 * Get all resumes for the authenticated user
 * Now includes parsed data status and preview
 */
async function getUserResumes(req, res) {
    try {
        const selectQuery = `
            SELECT 
                id,
                filename,
                original_name,
                file_size,
                mime_type,
                uploaded_at,
                parsed_at,
                parsed_data
            FROM resumes
            WHERE user_id = $1
            ORDER BY uploaded_at DESC
        `;

        const result = await query(selectQuery, [req.user.id]);

        // Transform the data to include parsing status
        const resumesWithStatus = result.rows.map(resume => {
            let parsedPreview = null;
            let parsingStatus = 'not_started';

            if (resume.parsed_at) {
                parsingStatus = 'completed';

                try {
                    const parsedData = JSON.parse(resume.parsed_data);

                    // Check if it's an error
                    if (parsedData.error) {
                        parsingStatus = 'failed';
                    } else {
                        // Create a preview of parsed data
                        parsedPreview = {
                            name: parsedData.name,
                            email: parsedData.email,
                            skillsCount: parsedData.skills?.length || 0,
                            hasEducation: !!parsedData.education,
                            hasExperience: !!parsedData.experience
                        };
                    }
                } catch (parseError) {
                    console.error('Error parsing stored data:', parseError);
                    parsingStatus = 'error';
                }
            }

            return {
                id: resume.id,
                filename: resume.filename,
                originalName: resume.original_name,
                fileSize: resume.file_size,
                mimeType: resume.mime_type,
                uploadedAt: resume.uploaded_at,
                parsingStatus,
                parsedAt: resume.parsed_at,
                parsedPreview
            };
        });

        res.json({
            success: true,
            count: result.rows.length,
            data: resumesWithStatus
        });

    } catch (error) {
        console.error('Error fetching resumes:', error);
        res.status(500).json({
            success: false,
            message: 'Failed to fetch resumes'
        });
    }
}

/**
 * Get detailed parsed data for a specific resume
 * Returns the complete extracted information
 */
async function getResumeParsedData(req, res) {
    try {
        const resumeId = req.params.id;

        const selectQuery = `
            SELECT 
                r.id,
                r.original_name,
                r.parsed_at,
                r.parsed_data,
                r.file_path
            FROM resumes r
            WHERE r.id = $1 AND r.user_id = $2
        `;

        const result = await query(selectQuery, [resumeId, req.user.id]);

        if (result.rows.length === 0) {
            return res.status(404).json({
                success: false,
                message: 'Resume not found'
            });
        }

        const resume = result.rows[0];

        // Parse the stored JSON data
        let parsedData = null;
        let parsingStatus = 'not_started';

        if (resume.parsed_data) {
            try {
                parsedData = JSON.parse(resume.parsed_data);
                parsingStatus = parsedData.error ? 'failed' : 'completed';
            } catch (error) {
                console.error('Error parsing stored data:', error);
                parsingStatus = 'error';
            }
        }

        res.json({
            success: true,
            data: {
                id: resume.id,
                filename: resume.original_name,
                parsedAt: resume.parsed_at,
                parsingStatus,
                parsedData: parsedData
            }
        });

    } catch (error) {
        console.error('Error fetching resume parsed data:', error);
        res.status(500).json({
            success: false,
            message: 'Failed to fetch resume data'
        });
    }
}

/**
 * Re-parse a resume
 * This endpoint allows users to trigger re-parsing if needed
 */
async function reparseResume(req, res) {
    try {
        const resumeId = req.params.id;

        // Get the resume file path
        const selectQuery = `
            SELECT id, file_path, filename
            FROM resumes
            WHERE id = $1 AND user_id = $2
        `;

        const result = await query(selectQuery, [resumeId, req.user.id]);

        if (result.rows.length === 0) {
            return res.status(404).json({
                success: false,
                message: 'Resume not found'
            });
        }

        const resume = result.rows[0];
        const fullPath = path.join(process.cwd(), resume.file_path);

        // Trigger re-parsing
        parseResumeAsync(resume.id, fullPath, req.user.id);

        res.json({
            success: true,
            message: 'Re-parsing initiated. Check back in a few moments for results.',
            data: {
                id: resume.id,
                filename: resume.filename
            }
        });

    } catch (error) {
        console.error('Error initiating re-parse:', error);
        res.status(500).json({
            success: false,
            message: 'Failed to initiate re-parsing'
        });
    }
}

/**
 * Delete a resume
 * Deletes file and all associated data including parsed information
 */
async function deleteResume(req, res) {
    try {
        const resumeId = req.params.id;

        // Get file information
        const selectQuery = `
            SELECT filename, file_path
            FROM resumes
            WHERE id = $1 AND user_id = $2
        `;

        const result = await query(selectQuery, [resumeId, req.user.id]);

        if (result.rows.length === 0) {
            return res.status(404).json({
                success: false,
                message: 'Resume not found'
            });
        }

        const resume = result.rows[0];

        // Delete the file from filesystem
        try {
            const fullPath = path.join(process.cwd(), resume.file_path);
            await fs.unlink(fullPath);
            console.log(`Deleted file: ${resume.file_path}`);
        } catch (fileError) {
            console.error('Error deleting file:', fileError);
            // Continue even if file deletion fails
        }

        // Delete from database (parsed data is in same row, so it's deleted too)
        await query('DELETE FROM resumes WHERE id = $1', [resumeId]);

        res.json({
            success: true,
            message: 'Resume and all associated data deleted successfully'
        });

    } catch (error) {
        console.error('Error deleting resume:', error);
        res.status(500).json({
            success: false,
            message: 'Failed to delete resume'
        });
    }
}

module.exports = {
    uploadResume,
    getUserResumes,
    getResumeParsedData,
    reparseResume,
    deleteResume
};