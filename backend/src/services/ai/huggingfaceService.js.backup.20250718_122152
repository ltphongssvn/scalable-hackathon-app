// Hugging Face Service
// This service handles all interactions with Hugging Face's API for resume parsing
// Updated to use working models: deepset/roberta-base-squad2 for Q&A extraction

const axios = require('axios');
const fs = require('fs').promises;
const pdf = require('pdf-parse');

class HuggingFaceService {
    constructor() {
        // Initialize with API key from environment
        this.apiKey = process.env.HUGGINGFACE_API_KEY;

        // Base URL for Hugging Face Inference API
        this.baseURL = 'https://api-inference.huggingface.co/models/';

        // Use the RoBERTa model that we confirmed is working
        // This model is specifically trained for extracting answers from text
        this.qaModel = 'deepset/roberta-base-squad2';

        // Also keep the BART model for classification if needed
        this.classificationModel = 'facebook/bart-large-mnli';
    }

    /**
     * Parse a resume file and extract structured information
     * This method reads the file, extracts text, and then uses Q&A to parse it
     * @param {string} filePath - Path to the resume file
     * @returns {Object} Extracted resume information
     */
    async parseResume(filePath) {
        try {
            console.log(`Starting resume parsing for file: ${filePath}`);

            // First, we need to extract text from the file
            // This handles both PDF and text files
            let resumeText = '';

            try {
                // Check if it's a PDF file
                if (filePath.toLowerCase().endsWith('.pdf')) {
                    const fileBuffer = await fs.readFile(filePath);
                    const pdfData = await pdf(fileBuffer);
                    resumeText = pdfData.text;
                } else {
                    // For text files (txt, doc, etc.), read directly
                    resumeText = await fs.readFile(filePath, 'utf8');
                }
            } catch (readError) {
                console.error('Error reading file:', readError);
                // If PDF parsing fails, try reading as text
                resumeText = await fs.readFile(filePath, 'utf8');
            }

            // Clean up the text to make it easier for the model to process
            // Remove excessive whitespace and normalize line breaks
            resumeText = resumeText.replace(/\s+/g, ' ').trim();

            console.log(`Extracted text length: ${resumeText.length} characters`);

            // Define the questions we want to ask about the resume
            // Each question is carefully crafted to extract specific information
            const questions = [
                {
                    question: "What is the person's full name?",
                    key: 'name',
                    fallbackQuestion: "Who is this resume about?"
                },
                {
                    question: "What is the email address?",
                    key: 'email',
                    fallbackQuestion: "What is the contact email?"
                },
                {
                    question: "What is the phone number?",
                    key: 'phone',
                    fallbackQuestion: "What is the contact number?"
                },
                {
                    question: "What programming languages and technical skills are mentioned?",
                    key: 'skills',
                    fallbackQuestion: "What are the technical skills?"
                },
                {
                    question: "What is the most recent job title and company?",
                    key: 'currentJob',
                    fallbackQuestion: "What is their current position?"
                },
                {
                    question: "What is the highest education degree and institution?",
                    key: 'education',
                    fallbackQuestion: "What education is listed?"
                },
                {
                    question: "How many years of experience are mentioned?",
                    key: 'experience',
                    fallbackQuestion: "What is the work experience?"
                }
            ];

            // Store all extracted information
            const extractedInfo = {};

            // Process each question using the Q&A model
            // We'll try the main question first, then the fallback if needed
            for (const { question, key, fallbackQuestion } of questions) {
                try {
                    console.log(`Extracting: ${key}`);

                    // Try the main question first
                    let answer = await this.extractWithQA(resumeText, question);

                    // If we didn't get a good answer, try the fallback question
                    if (!answer || answer.length < 2) {
                        answer = await this.extractWithQA(resumeText, fallbackQuestion);
                    }

                    if (answer) {
                        extractedInfo[key] = answer;
                        console.log(`âœ“ Extracted ${key}: ${answer.substring(0, 50)}...`);
                    }
                } catch (error) {
                    console.error(`Error extracting ${key}:`, error.message);
                }

                // Add a small delay between API calls to avoid rate limiting
                await new Promise(resolve => setTimeout(resolve, 500));
            }

            // Post-process the extracted information
            // This cleans up the data and structures it better
            const processedInfo = this.postProcessExtractedInfo(extractedInfo);

            return {
                success: true,
                data: processedInfo,
                rawText: resumeText.substring(0, 1000) // Include first 1000 chars for reference
            };

        } catch (error) {
            console.error('Resume parsing error:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * Extract information using the Question-Answering model
     * This is the core method that communicates with Hugging Face
     * @param {string} context - The text to search within
     * @param {string} question - The question to answer
     * @returns {string|null} The extracted answer
     */
    async extractWithQA(context, question) {
        try {
            const response = await axios.post(
                `${this.baseURL}${this.qaModel}`,
                {
                    inputs: {
                        question: question,
                        context: context
                    }
                },
                {
                    headers: {
                        'Authorization': `Bearer ${this.apiKey}`,
                        'Content-Type': 'application/json'
                    },
                    timeout: 30000
                }
            );

            // The model returns an answer with a confidence score
            // We only use answers with reasonable confidence
            if (response.data && response.data.answer && response.data.score > 0.01) {
                return response.data.answer;
            }

            return null;

        } catch (error) {
            if (error.response && error.response.status === 503) {
                // Model is loading, wait and retry once
                console.log('Model is loading, waiting 5 seconds...');
                await new Promise(resolve => setTimeout(resolve, 5000));

                // Retry once
                try {
                    const retryResponse = await axios.post(
                        `${this.baseURL}${this.qaModel}`,
                        {
                            inputs: {
                                question: question,
                                context: context
                            }
                        },
                        {
                            headers: {
                                'Authorization': `Bearer ${this.apiKey}`,
                                'Content-Type': 'application/json'
                            },
                            timeout: 30000
                        }
                    );

                    if (retryResponse.data && retryResponse.data.answer) {
                        return retryResponse.data.answer;
                    }
                } catch (retryError) {
                    console.error('Retry failed:', retryError.message);
                }
            }

            throw error;
        }
    }

    /**
     * Post-process extracted information to clean and structure it
     * This method improves the quality of the extracted data
     * @param {Object} rawInfo - The raw extracted information
     * @returns {Object} Cleaned and structured information
     */
    postProcessExtractedInfo(rawInfo) {
        const processed = {};

        // Clean up name - remove titles and extra words
        if (rawInfo.name) {
            processed.name = rawInfo.name
                .replace(/^(Mr\.|Mrs\.|Ms\.|Dr\.|Prof\.)\s*/i, '')
                .trim();
        }

        // Validate and clean email
        if (rawInfo.email) {
            const emailMatch = rawInfo.email.match(/[\w.-]+@[\w.-]+\.\w+/);
            processed.email = emailMatch ? emailMatch[0].toLowerCase() : rawInfo.email;
        }

        // Clean phone number - extract digits
        if (rawInfo.phone) {
            const phoneDigits = rawInfo.phone.replace(/\D/g, '');
            processed.phone = phoneDigits.length >= 10 ? phoneDigits : rawInfo.phone;
        }

        // Process skills - try to split into array
        if (rawInfo.skills) {
            // Split by common delimiters
            const skillArray = rawInfo.skills
                .split(/[,;]/)
                .map(skill => skill.trim())
                .filter(skill => skill.length > 0);
            processed.skills = skillArray.length > 0 ? skillArray : [rawInfo.skills];
        }

        // Keep other fields as extracted
        ['currentJob', 'education', 'experience'].forEach(field => {
            if (rawInfo[field]) {
                processed[field] = rawInfo[field];
            }
        });

        // Add extraction timestamp
        processed.extractedAt = new Date().toISOString();

        return processed;
    }

    /**
     * Alternative method to classify resume sections
     * This can be used to identify what type of content is in each part
     * @param {string} text - Text to classify
     * @param {Array<string>} labels - Possible categories
     * @returns {Object} Classification results
     */
    async classifyText(text, labels) {
        try {
            const response = await axios.post(
                `${this.baseURL}${this.classificationModel}`,
                {
                    inputs: text,
                    parameters: {
                        candidate_labels: labels
                    }
                },
                {
                    headers: {
                        'Authorization': `Bearer ${this.apiKey}`,
                        'Content-Type': 'application/json'
                    }
                }
            );

            return response.data;

        } catch (error) {
            console.error('Classification error:', error.message);
            return null;
        }
    }
}

// Export a singleton instance
module.exports = new HuggingFaceService();